name: BMS CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-deploy:
    name: Build, Scan & Deploy Book-My-Show App
    runs-on: self-hosted  # Use self-hosted runner on your local Ubuntu

    env:
      IMAGE_NAME: my-bms-app
      CONTAINER_NAME: my-bms-container
      APP_PORT: 3000
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      # 1Ô∏è‚É£ Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install Node & Dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install Dependencies
        run: |
          echo "Installing npm dependencies..."
          npm install
          chmod -R 755 node_modules/.bin

      # 3Ô∏è‚É£ Trivy FS Scan
      - name: Trivy FS Scan
        run: |
          echo "Scanning source code for vulnerabilities..."
          trivy fs --exit-code 1 --severity HIGH,CRITICAL . || true

      # 4Ô∏è‚É£ SonarQube Analysis
      - name: SonarQube Analysis
        run: |
          echo "Running SonarQube analysis..."
          npx sonarqube-scanner \
            -Dsonar.projectKey=BookMyShow \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      # 5Ô∏è‚É£ Build React App
      - name: Build React App
        run: |
          echo "Building React app..."
          CI=false npm run build

      # 6Ô∏è‚É£ Build Docker Image
      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t $IMAGE_NAME .

      # 7Ô∏è‚É£ Trivy Docker Image Scan
      - name: Trivy Docker Image Scan
        run: |
          echo "Scanning Docker image for vulnerabilities..."
          trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_NAME || true

      # 8Ô∏è‚É£ Stop Existing Container
      - name: Stop Existing Container
        run: |
          echo "Stopping existing container if running..."
          if [ "$(docker ps -a -q -f name=$CONTAINER_NAME)" ]; then
            docker rm -f $CONTAINER_NAME
          fi

      # 9Ô∏è‚É£ Run Docker Container
      - name: Run Docker Container
        run: |
          echo "Running Docker container..."
          docker run -d -p $APP_PORT:$APP_PORT --name $CONTAINER_NAME -e BROWSER=none $IMAGE_NAME
          sleep 15

      # üîü DAST Scan (OWASP ZAP)
      - name: DAST Scan (OWASP ZAP)
        run: |
          echo "Running DAST scan with OWASP ZAP..."
          docker run --rm --network host \
            owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:$APP_PORT \
            -r zap_report.html || true
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

      # 1Ô∏è‚É£1Ô∏è‚É£ Smoke Test
      - name: Smoke Test
        run: |
          echo "Verifying the app is running..."
          curl -f http://localhost:$APP_PORT || exit 1
