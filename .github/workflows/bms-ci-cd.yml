name: BMS CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: self-hosted  # âœ… Use your local Ubuntu machine as runner

    env:
      IMAGE_NAME: my-bms-app
      CONTAINER_NAME: my-bms-container
      APP_PORT: 3000
      SONAR_HOST_URL: http://localhost:9000
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          echo "Installing npm dependencies..."
          npm install
          chmod -R 755 node_modules/.bin

      - name: Install Trivy & Sonar Scanner
        run: |
          echo "Installing Trivy and Sonar Scanner..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          npm install -g sonarqube-scanner

      - name: Trivy FS Scan
        run: |
          echo "Scanning source code for vulnerabilities..."
          trivy fs --exit-code 0 --severity HIGH,CRITICAL . || true

      - name: SonarQube Analysis
        run: |
          echo "Running SonarQube analysis..."
          sonar-scanner \
            -Dsonar.projectKey=BookMyShow \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Build React App
        run: |
          echo "Building React app..."
          CI=false npm run build

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t $IMAGE_NAME .

      - name: Trivy Image Scan
        run: |
          echo "Scanning Docker image for vulnerabilities..."
          trivy image --exit-code 0 --severity HIGH,CRITICAL $IMAGE_NAME || true

      - name: Stop & Remove Existing Container
        run: |
          echo "Stopping old container if exists..."
          docker ps -a -q -f name=$CONTAINER_NAME && docker rm -f $CONTAINER_NAME || echo "No old container found"

      - name: Run Docker Container
        run: |
          echo "Running Docker container..."
          docker run -d -p $APP_PORT:$APP_PORT --name $CONTAINER_NAME -e BROWSER=none $IMAGE_NAME
          sleep 15

      - name: DAST Scan (OWASP ZAP)
        run: |
          echo "Running OWASP ZAP DAST scan..."
          docker run --rm --network host zaproxy/zap-stable zap-baseline.py \
            -t http://localhost:$APP_PORT \
            -r zap_report.html || true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

      - name: Smoke Test
        run: |
          echo "Verifying app is running..."
          curl -f http://localhost:$APP_PORT || exit 1
