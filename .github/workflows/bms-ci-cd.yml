name: BMS CI/CD Pipeline (Automated Tests + Security)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: bms-app
      CONTAINER_NAME: bms-app
      APP_PORT: 3000

    steps:
      # 1Ô∏è‚É£ Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Install Dependencies
      - name: Install Dependencies
        run: |
          npm install
          chmod -R 755 node_modules/.bin

      # 4Ô∏è‚É£ Pre-Container Automated Tests
      - name: Pre-Container Automated Tests
        run: |
          cat << 'EOF' > testscript.sh
          #!/bin/sh
          echo "üîß Running Pre-Container Automated Tests..."

          # Check build folder
          if [ ! -d "build" ]; then
            echo "‚ùå Build folder not found - Test Failed"
            exit 1
          fi
          echo "‚úÖ Build folder exists"

          # Check required files
          for file in package.json server.js; do
            if [ ! -f "$file" ]; then
              echo "‚ùå $file missing - Test Failed"
              exit 1
            else
              echo "‚úÖ $file exists"
            fi
          done

          echo "üéØ Pre-Container Tests Passed!"
          EOF
          chmod +x testscript.sh
          ./testscript.sh

      # 5Ô∏è‚É£ Build React App
      - name: Build React App
        run: CI=false npm run build

      # 6Ô∏è‚É£ Build Docker Image
      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME .

      # 7Ô∏è‚É£ Install Trivy + Pull ZAP
      - name: Install Trivy & Pull ZAP
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          docker pull zaproxy/zap-stable:latest

      # 8Ô∏è‚É£ Trivy Filesystem Scan (SCA)
      - name: Trivy FS Scan
        run: |
          mkdir -p reports
          trivy fs --format template --template "@contrib/html.tpl" -o reports/trivy-fs-report.html . || true

      # 9Ô∏è‚É£ Trivy Docker Image Scan
      - name: Trivy Docker Image Scan
        run: |
          trivy image --format template --template "@contrib/html.tpl" -o reports/trivy-image-report.html $IMAGE_NAME || true

      # üîü Run Docker Container
      - name: Run Docker Container
        run: |
          docker run -d -p $APP_PORT:$APP_PORT --name $CONTAINER_NAME $IMAGE_NAME
          sleep 15

      # 1Ô∏è‚É£1Ô∏è‚É£ Container Automated Tests
      - name: Container Automated Tests
        run: |
          cat << 'EOF' > container-tests.sh
          #!/bin/sh
          echo "üîß Running Container Automated Tests..."

          # Check server.js inside container
          if [ ! -f "/app/server.js" ]; then
            echo "‚ùå server.js missing - Test Failed"
            exit 1
          fi
          echo "‚úÖ server.js exists"

          # Functional test: check app responds
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$APP_PORT)
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå App did not respond with 200 - Test Failed"
            exit 1
          fi
          echo "‚úÖ App responded with 200 OK"

          echo "üéØ Container Tests Passed!"
          EOF
          chmod +x container-tests.sh
          docker cp container-tests.sh $CONTAINER_NAME:/container-tests.sh
          docker exec $CONTAINER_NAME sh /container-tests.sh

      # 1Ô∏è‚É£2Ô∏è‚É£ Smoke Test
      - name: Smoke Test
        run: curl -f http://localhost:$APP_PORT || exit 1

      # 1Ô∏è‚É£3Ô∏è‚É£ OWASP ZAP DAST Scan
      - name: DAST Scan (OWASP ZAP)
        run: |
          docker run --rm --network host zaproxy/zap-stable zap-baseline.py \
            -t http://localhost:$APP_PORT \
            -r reports/zap-report.html || true

      # 1Ô∏è‚É£4Ô∏è‚É£ Upload Security Reports
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

      # 1Ô∏è‚É£5Ô∏è‚É£ Stop & Remove Container
      - name: Stop & Remove Container
        run: |
          docker rm -f $CONTAINER_NAME || true
